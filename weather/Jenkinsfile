// node('dev') {
//     // Define environment variable
//     def imageName = 'edmundtetteh/movies-parser'
//     def registry = 'https://registry.slowcoder.com'

//     // Stage: Checkout
//     stage('Checkout') {
//         // Git checkout
//         checkout([$class: 'GitSCM', branches: [[name: 'develop']],
//                   userRemoteConfigs: [[url: 'git@github.com:edmundtetteh/weather-app-project.git']],
//                   credentialsId: 'ssh-togithub'])
//     }
// }

pipeline {
    agent {
        label "dev"
    }
      environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhubnew')
	}
    

    // environment {
    //     DOCKERHUB_CREDENTIALS = credentials('github-ssh')
    // }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }




    stages {
        stage('Login') {

        steps {
            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }
        stage('Build auth') {
            steps {
                sh '''
                cd /home/ubuntu/workspace/edmund-work-space/WEATHERAPP/WEATHERAPP/auth
                docker build -t edmundtetteh/weatherapp-auth:${BUILD_NUMBER} .
                   '''
                
            }
        }



            stage('Push auth') {
                when{ 
                expression {
                    env.GIT_BRANCH == 'origin/develop'  }
                    }
                    steps {
                        sh '''
                    docker push edmundtetteh/weatherapp-auth:${BUILD_NUMBER}
                        '''
                    }
           }
        
        stage('Build UI') {
            steps {
                sh '''
            cd /home/ubuntu/workspace/edmund-work-space/WEATHERAPP/WEATHERAPP/UI
            docker build -t edmundtetteh/weatherapp-ui:${BUILD_NUMBER} .
                '''
            }
        }
        stage('Push UI ') {
         when{ 
          expression {
            env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
             docker push edmundtetteh/weatherapp-ui:${BUILD_NUMBER}
                '''
            }
        }
        stage('Build Weather') {
            steps {
                sh '''
            cd /home/ubuntu/workspace/edmund-work-space/WEATHERAPP/WEATHERAPP/weather
            docker build -t edmundtetteh/weatherapp-weather:${BUILD_NUMBER} .
                '''
            }
        }
        stage('Push weather') {
         when{ 
          expression {
            env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
             docker push edmundtetteh/weatherapp-weather:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build Redis') {
            steps {
                sh '''
            cd /home/ubuntu/workspace/edmund-work-space/WEATHERAPP/WEATHERAPP/redis
            docker build -t edmundtetteh/weatherapp-redis:${BUILD_NUMBER} .
                '''
            }
        }
        stage('Push Redis') {
         when{ 
          expression {
            env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
             docker push edmundtetteh/weatherapp-redis:${BUILD_NUMBER}
                '''
            }
        }
        stage('Build db') {
            steps {
                sh '''
            cd /home/ubuntu/workspace/edmund-work-space/WEATHERAPP/WEATHERAPP/db
            docker build -t edmundtetteh/weatherapp-db:${BUILD_NUMBER} .
                '''
            }
        }
        stage('Push db') {
         when{ 
          expression {
            env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
             docker push edmundtetteh/weatherapp-db:${BUILD_NUMBER}
                '''
            }
        } 



        stage('Generate-compose') {
	      agent { 
                label "deployer"
                 }
         when{ 
          expression {
            env.GIT_BRANCH == 'origin/develop' }
            }
	      steps {
	        script {
	          withCredentials([
	            string(credentialsId: 'WEATHERAPP_MYSQL_ROOT_PASSWORD', variable: 'WEATHERAPP_MYSQL_ROOT_PASSWORD'),
	            string(credentialsId: 'WEATHERAPP_REDIS_PASSWORD', variable: 'WEATHERAPP_REDIS_PASSWORD'),
	            string(credentialsId: 'WEATHERAPP_DB_PASSWORD', variable: 'WEATHERAPP_DB_PASSWORD'),
                string(credentialsId: 'WEATHERAPP_APIKEY', variable: 'WEATHERAPP_APIKEY')
	          ]) {

                sh '''
cat <<EOF > docker-compose.yml
  version: '3.5'
  services:
    db:
      container_name: weatherapp-db
      image: edmundtetteh/weatherapp-db:${BUILD_NUMBER}
      environment:
        MYSQL_ROOT_PASSWORD: ${WEATHERAPP_MYSQL_ROOT_PASSWORD}
      volumes:
        - db-data:/var/lib/mysql
      networks:   
        - weatherapp
      restart: always
  
    redis:
      container_name: weatherapp-redis
      image: edmundtetteh/weatherapp-redis:${BUILD_NUMBER}
      networks:
        - weatherapp
      environment:
        REDIS_USER: redis
        REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
      volumes:
        - redis-data:/data
      restart: always
  
    weather:
      container_name: weatherapp-weather
      image: devopseasylearning/thomisis-weather:v0.0.1
      expose:
        - 5000
      environment:
        APIKEY: ${WEATHERAPP_APIKEY}
      networks:
        - weatherapp
      restart: always
      depends_on:
        - db
        - redis  # Weather depends on both db and redis
    auth:
      container_name: weatherapp-auth
      image: edmundtetteh/weatherapp-auth:${BUILD_NUMBER}
      environment:
        DB_HOST: db
        DB_PASSWORD: ${WEATHERAPP_DB_PASSWORD}
      expose:
        - 8080
      networks:
        - weatherapp
      restart: always
      depends_on:
        - weather  # Auth depends on the weather service
  
    ui:
      container_name: weatherapp-ui
      image: edmundtetteh/weatherapp-ui:${BUILD_NUMBER}
      environment:
       AUTH_HOST: auth
       AUTH_PORT: 8080
       WEATHER_HOST: weather
       WEATHER_PORT: 5000
       REDIS_USER: redis
       REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
      expose:
        - 3000
      ports:
        - 3000:3000
      networks:
        - weatherapp
      restart: always
      depends_on:
        - auth  # UI depends on Auth
  networks:
    weatherapp:
  
  volumes:
    db-data:
    redis-data:
EOF
	            '''




              }
            }
        }
    }

stage('Deploy') {
	      agent { 
                label "deployer"
                 }
         when{ 
          expression {
            env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
            docker-compose down --remove-orphans || true
            docker-compose up -d 
            docker-compose ps 
            ip addr show eth0 | grep inet | awk '{print $2}' | cut -d/ -f1

                '''
            }
        }


    }

}








