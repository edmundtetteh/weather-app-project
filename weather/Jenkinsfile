// node('dev') {
//     // Define environment variable
//     def imageName = 'edmundtetteh/movies-parser'
//     def registry = 'https://registry.slowcoder.com'

//     // Stage: Checkout
//     stage('Checkout') {
//         // Git checkout
//         checkout([$class: 'GitSCM', branches: [[name: 'develop']],
//                   userRemoteConfigs: [[url: 'git@github.com:edmundtetteh/weather-app-project.git']],
//                   credentialsId: 'ssh-togithub'])
//     }
// }

pipeline {
    agent {
        label "dev"
    }
      environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhubnew')
	}
    

    // environment {
    //     DOCKERHUB_CREDENTIALS = credentials('github-ssh')
    // }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }




    stages {
        stage('Build auth') {
            steps {
                sh '''
                cd /home/ubuntu/workspace/edmund-work-space/WEATHERAPP/WEATHERAPP/auth
                docker build -t edmundtetteh/weatherapp-auth:${BUILD_NUMBER} .
                   '''
                
            }
        }
        // stage('Login') {

        // steps {
        //     sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password'
        //     }
        // }

        stage('Login') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhubnew', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
            script {
                def loginCommand = "docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                def loginStatus = sh(script: loginCommand, input: "echo $DOCKERHUB_CREDENTIALS_PSW", returnStatus: true)
                if (loginStatus != 0) {
                    error "Docker login failed"
                }
            }
        }
    }
}

            stage('Push auth') {
                when{ 
                expression {
                    env.GIT_BRANCH == 'origin/develop'  }
                    }
                    steps {
                        sh '''
                    docker push edmundtetteh/weatherapp-auth:${BUILD_NUMBER}
                        '''
                    }
           }
        
              

        // stage('Test auth') {
	    //  agent {
        //     docker {
        //       image 'golang:alpine'
        //       args '-u root:root'
        //     }
        // }


        stage('Test') {
            steps {
                // Add your test steps
                echo 'Testing...'
            }
        }

        stage('Deploy') {
            steps {
                // Add your deployment steps 
                echo 'Deploying...'
            }
        }
    }
}








